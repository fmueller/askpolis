name: Backend

on:
  push:
    branches: [ main ]
    paths:
      - "backend/**"
  pull_request:
    branches: [ main ]
    paths:
      - "backend/**"

env:
  PYTHON_VERSION: "3.12.9"
  POETRY_VERSION: "2.1.2"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  WORKING_DIRECTORY: backend

jobs:
  lint-and-typecheck:
    name: Linting and Type Checking
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Poetry
        run: pipx install poetry==${{ env.POETRY_VERSION }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'poetry'
      - name: Install dependencies
        run: poetry install --no-interaction
      - name: Run Ruff checks
        run: poetry run ruff check .
      - name: Run mypy for type checking
        run: poetry run mypy .

  unit-tests:
    name: Unit Tests
    needs: lint-and-typecheck
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Poetry
        run: pipx install poetry==${{ env.POETRY_VERSION }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'poetry'
      - name: Install dependencies
        run: poetry install --no-interaction
      - name: Run unit tests
        run: poetry run pytest -v -m unit

  integration-tests:
    name: Integration Tests
    needs: lint-and-typecheck
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Poetry
        run: pipx install poetry==${{ env.POETRY_VERSION }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'poetry'
      - name: Install dependencies
        run: poetry install --no-interaction
      - name: Run integration tests
        run: poetry run pytest -v -m integration

  e2e-tests:
    name: End-to-End Tests
    needs: lint-and-typecheck
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Poetry
        run: pipx install poetry==${{ env.POETRY_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'poetry'

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Cache Docker images
        uses: actions/cache@v3
        with:
          path: /tmp/.docker-cache
          key: ${{ runner.os }}-docker-images-${{ hashFiles('backend/compose.yaml', 'backend/ollama.Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-docker-images-

      - name: Load cached Docker images
        run: |
          if [ -d "/tmp/.docker-cache" ]; then
            for image in /tmp/.docker-cache/*.tar; do
              if [ -f "$image" ]; then
                docker load -i "$image"
              fi
            done
          fi

      - name: Pull and cache Docker images
        run: |
          mkdir -p /tmp/.docker-cache

          # Extract Redis version from compose.yaml
          REDIS_VERSION=$(grep -A 5 'redis:' ../compose.yaml | grep 'image:' | sed 's/.*redis://' | tr -d ' ')

          # Extract Postgres version from compose.yaml
          POSTGRES_VERSION=$(grep -A 5 'postgres:' ../compose.yaml | grep 'image:' | sed 's/.*://' | tr -d ' ')

          # Extract Ollama version from Dockerfile
          OLLAMA_VERSION=$(grep 'FROM ollama/ollama:' ollama.Dockerfile | sed 's/.*ollama://' | tr -d ' ')

          # Pull images if not already present and save to cache
          for IMAGE in "redis:${REDIS_VERSION}" "pgvector/pgvector:${POSTGRES_VERSION}" "ollama/ollama:${OLLAMA_VERSION}"; do
            if ! docker image inspect "$IMAGE" >/dev/null 2>&1; then
              docker pull "$IMAGE"
            fi
            SAFE_NAME=$(echo "$IMAGE" | tr '/:' '_')
            if [ ! -f "/tmp/.docker-cache/${SAFE_NAME}.tar" ]; then
              docker save "$IMAGE" -o "/tmp/.docker-cache/${SAFE_NAME}.tar"
            fi
          done

      - name: Cache Ollama models
        uses: actions/cache@v3
        with:
          path: backend/tests/end2end/.ollama_cache
          key: ${{ runner.os }}-ollama-cache-${{ hashFiles('backend/tests/end2end/conftest.py') }}
          restore-keys: |
            ${{ runner.os }}-ollama-cache-

      - name: Run end-to-end tests
        run: poetry run pytest -v -m e2e

  build-and-push-image:
    name: Build and Push Docker Image
    needs: [ unit-tests, integration-tests, e2e-tests ]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha, mode=max
