name: Backend

on:
  push:
    branches: [ main ]
    paths:
      - "backend/**"
  pull_request:
    branches: [ main ]
    paths:
      - "backend/**"
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.12.11"
  POETRY_VERSION: "2.1.3"
  TORCH_VERSION: "2.8.0"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  WORKING_DIRECTORY: backend

jobs:
  lint-and-typecheck:
    name: Linting and Type Checking
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Install Poetry
        run: pipx install poetry==${{ env.POETRY_VERSION }}
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'poetry'
      - name: Install dependencies
        run: |
          poetry install --no-interaction
          python -m pip freeze | grep -E "(torch|nvidia-|triton)" | xargs -r python -m pip uninstall -y
          python -m pip install --index-url https://download.pytorch.org/whl/cpu torch~=${{ env.TORCH_VERSION }}
      - name: Run Ruff checks
        run: poetry run ruff check .
      - name: Run mypy for type checking
        run: poetry run mypy .

  unit-tests:
    name: Unit Tests
    needs: lint-and-typecheck
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Install Poetry
        run: pipx install poetry==${{ env.POETRY_VERSION }}
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'poetry'
      - name: Install dependencies
        run: |
          poetry install --no-interaction
          python -m pip freeze | grep -E "(torch|nvidia-|triton)" | xargs -r python -m pip uninstall -y
          python -m pip install --index-url https://download.pytorch.org/whl/cpu torch~=${{ env.TORCH_VERSION }}
      - name: Run unit tests
        run: poetry run pytest -v -m unit

  integration-tests:
    name: Integration Tests
    needs: lint-and-typecheck
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Poetry
        run: pipx install poetry==${{ env.POETRY_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'poetry'

      - name: Install dependencies
        run: |
          poetry install --no-interaction
          python -m pip freeze | grep -E "(torch|nvidia-|triton)" | xargs -r python -m pip uninstall -y
          python -m pip install --index-url https://download.pytorch.org/whl/cpu torch~=${{ env.TORCH_VERSION }}

      - name: Cache Docker images
        uses: actions/cache@v4
        with:
          path: /tmp/.docker-cache
          key: ${{ runner.os }}-docker-images-integration-${{ hashFiles('backend/compose.yaml', 'backend/ollama.Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-docker-images-integration-

      - name: Load cached Docker images
        run: |
          if [ -d "/tmp/.docker-cache" ]; then
            for image in /tmp/.docker-cache/*.tar; do
              if [ -f "$image" ]; then
                docker load -i "$image"
              fi
            done
          fi

      - name: Pull and cache Docker images
        run: |
          mkdir -p /tmp/.docker-cache

          # Extract Postgres version from compose.yaml
          POSTGRES_VERSION=$(grep -A 5 'postgres:' compose.yaml | grep 'image:' | sed 's/.*pgvector://' | tr -d ' ')

          # Pull images if not already present and save to cache
          for IMAGE in "pgvector/pgvector:${POSTGRES_VERSION}"; do
            if ! docker image inspect "$IMAGE" >/dev/null 2>&1; then
              docker pull "$IMAGE"
            fi
            SAFE_NAME=$(echo "$IMAGE" | tr '/:' '_')
            if [ ! -f "/tmp/.docker-cache/${SAFE_NAME}.tar" ]; then
              docker save "$IMAGE" -o "/tmp/.docker-cache/${SAFE_NAME}.tar"
            fi
          done

      - name: Run integration tests
        run: poetry run pytest -v -m integration
        env:
          TESTCONTAINERS_RYUK_DISABLED: true

  # Build the candidate/prerelease image once, push to GHCR, and share its digest.
  build-test-image:
    name: Build Test Docker Image (Prerelease)
    needs: lint-and-typecheck
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    permissions:
      contents: read
      packages: write
    outputs:
      prerelease_tag: ${{ steps.meta.outputs.prerelease_tag }}
      prerelease_digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Log in to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Compute prerelease tag
        id: meta
        run: |
          echo "prerelease_tag=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:prerelease-${GITHUB_SHA}" >> "$GITHUB_OUTPUT"

      - name: Build and push prerelease image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.prerelease_tag }}
          labels: |
            org.opencontainers.image.title=askpolis-backend
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=0.0.0-prerelease
            io.askpolis.prerelease=true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            DISABLE_HUGGINGFACE_DOWNLOAD=true

  e2e-tests:
    name: End-to-End Tests
    needs: [ lint-and-typecheck, build-test-image ]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Poetry
        run: pipx install poetry==${{ env.POETRY_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'poetry'

      - name: Install dependencies
        run: |
          poetry install --no-interaction
          python -m pip freeze | grep -E "(torch|nvidia-|triton)" | xargs -r python -m pip uninstall -y
          python -m pip install --index-url https://download.pytorch.org/whl/cpu torch~=${{ env.TORCH_VERSION }}

      - name: Log in to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull prerelease image by digest and tag locally for tests
        run: |
          PRERELEASE_TAG="${{ needs.build-test-image.outputs.prerelease_tag }}"
          PRERELEASE_DIGEST="${{ needs.build-test-image.outputs.prerelease_digest }}"
          # Pull by digest for immutability
          docker pull "${PRERELEASE_TAG}@${PRERELEASE_DIGEST}"
          # Provide a conventional local tag for the test harness, if needed
          docker tag "${PRERELEASE_TAG}@${PRERELEASE_DIGEST}" "askpolis-e2e-test:latest"
        env:
          TESTCONTAINERS_RYUK_DISABLED: true

      - name: Run end-to-end tests
        run: poetry run pytest -v -m e2e
        env:
          TESTCONTAINERS_RYUK_DISABLED: true
          DOCKER_TEST_IMAGE: ${{ needs.build-test-image.outputs.prerelease_tag }}@${{ needs.build-test-image.outputs.prerelease_digest }}

  promote-docker-image:
    name: Promote Docker Image
    needs: [ unit-tests, integration-tests, e2e-tests, build-test-image ]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Log in to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Promote by adding "latest" tag to the same digest that passed tests
      - name: Tag prerelease digest as latest
        working-directory: ${{ github.workspace }}
        run: |
          PRERELEASE_TAG="${{ needs.build-test-image.outputs.prerelease_tag }}"
          PRERELEASE_DIGEST="${{ needs.build-test-image.outputs.prerelease_digest }}"
          LATEST_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          docker buildx imagetools create -t "${LATEST_TAG}" "${PRERELEASE_TAG}@${PRERELEASE_DIGEST}"
