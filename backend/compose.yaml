services:
  api:
    build: .
    container_name: askpolis-api
    command: ./scripts/start-api.sh
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - OLLAMA_URL=http://ollama:11434/v1
      - DATABASE_URL=postgresql+psycopg://postgres:secret@postgres:5432/askpolis-db
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=askpolis-api
      - OTEL_RESOURCE_ATTRIBUTES=environment=local
      - RATE_LIMIT_REQUESTS_PER_MINUTE=10
      - ASKPOLIS_DEV=true
    volumes:
      - ./src:/app/live-reload
    depends_on:
      - postgres
      - redis
      - ollama
      - otel-collector

  worker:
    build: .
    container_name: askpolis-worker
    command: ./scripts/start-worker.sh
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - OLLAMA_URL=http://ollama:11434/v1
      - DATABASE_URL=postgresql+psycopg://postgres:secret@postgres:5432/askpolis-db
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=askpolis-worker
      - OTEL_RESOURCE_ATTRIBUTES=environment=local
      - ASKPOLIS_DEV=true
    volumes:
      - ./src:/app/live-reload
    depends_on:
      - postgres
      - redis
      - ollama
      - api
      - otel-collector

  scheduler:
    build: .
    container_name: celery-scheduler
    command: ./scripts/start-scheduler.sh
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - ASKPOLIS_DEV=true
    volumes:
      - ./src:/app/live-reload
    depends_on:
      - worker

  flower:
    image: mher/flower:2.0.1
    container_name: flower
    command: [ "celery", "--broker=redis://redis:6379/0", "flower", "--port=5555" ]
    ports:
      - "5555:5555"
    depends_on:
      - redis

  ollama:
    build:
      context: .
      dockerfile: ollama.Dockerfile
    container_name: ollama

  redis:
    image: redis:7.4.2-bookworm
    container_name: redis

  postgres:
    image: pgvector/pgvector:pg17
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=askpolis-db
      - POSTGRES_PASSWORD=secret
    volumes:
      - postgres_data:/var/lib/postgresql/data

  fluent-bit:
    image: fluent/fluent-bit:3.2.4
    container_name: fluent-bit
    user: root # Run as root to access log files
    environment:
      - DOCKER_HOME=${DOCKER_HOME:-/var/lib/docker}
    volumes:
      - ../infrastructure/configs/fluent-bit/fluent-bit-compose.conf:/fluent-bit/etc/fluent-bit.conf
      - ../infrastructure/configs/fluent-bit/parser.conf:/fluent-bit/etc/parser.conf
      - ../infrastructure/configs/fluent-bit/docker-metadata.lua:/fluent-bit/etc/docker-metadata.lua
      - ${DOCKER_HOME:-/var/lib/docker}/containers:${DOCKER_HOME:-/var/lib/docker}/containers:ro
      - /var/log:/var/log:ro
    depends_on:
      - otel-collector
      - loki

  otel-collector:
    image: otel/opentelemetry-collector:0.118.0
    container_name: otel-collector
    volumes:
      - ../infrastructure/configs/otel-collector.yaml:/etc/otel-collector-config.yaml
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    depends_on:
      - tempo
      - loki

  grafana:
    image: grafana/grafana:11.4.0
    container_name: grafana
    volumes:
      - ../infrastructure/configs/grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - grafana_data:/var/lib/grafana
    environment:
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_BASIC_ENABLED=false
      - GF_AUTH_DISABLE_SIGNOUT_MENU=true
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - loki
      - tempo

  prometheus:
    image: prom/prometheus:v3.1.0
    container_name: prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yaml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.enable-remote-write-receiver"
      - "--enable-feature=native-histograms"
      - "--log.level=warn"
    volumes:
      - ../infrastructure/configs/prometheus.yaml:/etc/prometheus/prometheus.yaml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    depends_on:
      - otel-collector

  # Tempo runs as user 10001, and docker compose creates the volume as root.
  # As such, we need to chown the volume in order for Tempo to start correctly.
  tempo-init:
    image: &tempoImage grafana/tempo:2.7.0
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - tempo_data:/var/tempo

  tempo:
    image: *tempoImage
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ../infrastructure/configs/tempo.yaml:/etc/tempo.yaml
      - tempo_data:/var/tempo
    depends_on:
      - tempo-init

  loki:
    image: grafana/loki:3.3.2
    container_name: loki
    command: [ "-config.file=/etc/loki/loki-config.yaml" ]
    volumes:
      - ../infrastructure/configs/loki.yaml:/etc/loki/loki-config.yaml
      - loki_data:/loki

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
  loki_data:
  tempo_data:
